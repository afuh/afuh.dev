---
import '@fontsource/jetbrains-mono'
import '../styles/global.css'
import seoImageFile from '../assets/seo-image.jpg'

export type SEOImage = {
  url: string
  contentType: string
  size: { width: number; height: number }
}

export interface Props {
  title: string
  description: string
  seoImage?: SEOImage
}

const seoImageDefault = {
  url: seoImageFile.src,
  contentType: seoImageFile.format,
  size: {
    width: seoImageFile.width,
    height: seoImageFile.height,
  },
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const { title, description, seoImage = seoImageDefault } = Astro.props
---

<html lang="en">
  <head>
    <title>{title}</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta property="og:locale" content="en" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(seoImage.url, Astro.url)} />
    <meta property="og:image:type" content={seoImage.contentType} />
    <meta property="og:image:width" content={seoImage.size.width.toString()} />
    <meta property="og:image:height" content={seoImage.size.height.toString()} />
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(seoImage.url, Astro.url)} />

    <!-- This is intentionally inlined to avoid FOUC -->
    <script is:inline>
      const root = document.documentElement

      if (window.matchMedia('(prefers-color-scheme: light)').matches) {
        root.classList.add('theme-light')
      } else {
        root.classList.remove('theme-light')
      }
    </script>
  </head>
  <body>
    <slot />
  </body>
</html>
